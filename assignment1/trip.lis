     1                                  
     2                                  ; Code by Esteban Escartin
     3                                  
     4                                  
     5                                  global compute_trip
     6                                  extern scanf
     7                                  extern printf
     8                                  extern exit
     9                                  
    10                                  section .bss ; "Block Starting Symbols", used for storing all your variables, most important, permanent memory locations
    11                                      ; Storage Variables
    12 00000000 ????????????????            init_speed resq 1
    13 00000008 ????????????????            init_dist resq 1
    14 00000010 ????????????????            init_time resq 1
    15 00000018 ????????????????            second_speed resq 1
    16 00000020 ????????????????            second_dist resq 1
    17 00000028 ????????????????            second_time resq 1
    18 00000030 ????????????????            total_time resq 1
    19 00000038 ????????????????            avg_speed resq 1
    20                                  
    21                                  
    22                                  section .data ; Where you can initialize constants 
    23                                      ; Distance to Vegas
    24 00000000 0000000000B06F40            dist dq 253.5
    25                                      ; Question prompts for the user
    26 00000008 506C6561736520656E-         q1 db "Please enter the speed for the initial segment of the trip (mph): ", 0
    26 00000011 746572207468652073-
    26 0000001A 7065656420666F7220-
    26 00000023 74686520696E697469-
    26 0000002C 616C207365676D656E-
    26 00000035 74206F662074686520-
    26 0000003E 7472697020286D7068-
    26 00000047 293A2000           
    27 0000004B 466F7220686F77206D-         q2 db "For how many miles will you maintain this average speed? ", 0
    27 00000054 616E79206D696C6573-
    27 0000005D 2077696C6C20796F75-
    27 00000066 206D61696E7461696E-
    27 0000006F 207468697320617665-
    27 00000078 726167652073706565-
    27 00000081 643F2000           
    28 00000085 576861742077696C6C-         q3 db "What will be your speed during the final segment of the trip (mph)? ", 0
    28 0000008E 20626520796F757220-
    28 00000097 737065656420647572-
    28 000000A0 696E67207468652066-
    28 000000A9 696E616C207365676D-
    28 000000B2 656E74206F66207468-
    28 000000BB 65207472697020286D-
    28 000000C4 7068293F2000       
    29                                      ; Printf formats
    30 000000CA 257300                      string_format db "%s", 0
    31 000000CD 256C6600                    decimal_format db "%lf", 0
    32 000000D1 25660A00                    float_format db "%f", 10, 0
    33                                      ; Output messages
    34 000000D5 596F75722061766572-         out1 db "Your average speed will be %f mph.", 10, 0
    34 000000DE 616765207370656564-
    34 000000E7 2077696C6C20626520-
    34 000000F0 2566206D70682E0A00 
    35 000000F9 54686520746F74616C-         out2 db "The total travel time will be %f hours.", 10, 0 
    35 00000102 2074726176656C2074-
    35 0000010B 696D652077696C6C20-
    35 00000114 626520256620686F75-
    35 0000011D 72732E0A00         
    36                                      ; Exit status incase of an early quit
    37 00000122 01000000                    exit_status dd 1
    38                                      ; Invalid input message
    39 00000126 496E70757420697320-         invalid_inp db "Input is invalid. This program will now terminate.", 10, 0
    39 0000012F 696E76616C69642E20-
    39 00000138 546869732070726F67-
    39 00000141 72616D2077696C6C20-
    39 0000014A 6E6F77207465726D69-
    39 00000153 6E6174652E0A00     
    40                                      ; A zero used for comparisons
    41 0000015A 00000000                    zero dd 0
    42                                  
    43                                  
    44                                  section .text ; Contains the logic for my code
    45                                  
    46                                      ;--------------------------------------------------------------------------
    47                                      ; This function is called when a user gives an invalid input.
    48                                      ; It is responsible for informing them of the error, and quitting
    49                                      ; the program entirely using exit from the C library
    50                                  
    51                                      quit_program: 
    52                                  
    53                                      ; Inform the user of the input error
    54 00000000 4883EC08                    sub rsp, 8
    55 00000004 48BF-                       mov rdi, invalid_inp
    55 00000006 [2601000000000000] 
    56 0000000E E8(00000000)                call printf
    57 00000013 4883C408                    add rsp, 8
    58                                  
    59                                      ; Call C's exit function to quit the program
    60 00000017 8B0425[22010000]            mov eax, dword [exit_status] 
    61 0000001E E8(00000000)                call exit
    62                                  
    63                                      ;--------------------------------------------------------------------------
    64                                      ; This is the start of the program that is called in the C++ Code, and the main program for this assignment
    65                                  
    66                                      compute_trip:
    67                                  
    68                                      ;--------------------------------------------------------------------------
    69                                      ; This whole section is for dealing with the first output and input process, including testing it
    70                                  
    71                                      ; Write the first question to output
    72 00000023 4883EC08                    sub rsp, 8
    73 00000027 48BF-                       mov rdi, q1
    73 00000029 [0800000000000000] 
    74 00000031 E8(00000000)                call printf
    75 00000036 4883C408                    add rsp, 8
    76                                      ; Read input from the first question and store it in xmm8
    77 0000003A 6A00                        push qword 0
    78 0000003C B800000000                  mov qword rax, 0
    79 00000041 48BF-                       mov rdi, decimal_format
    79 00000043 [CD00000000000000] 
    80 0000004B 4889E6                      mov rsi, rsp
    81 0000004E E8(00000000)                call scanf
    82 00000053 F2440F100424                movsd xmm8, [rsp]
    83 00000059 58                          pop rax
    84 0000005A F2440F110425-               movsd qword [init_speed], xmm8
    84 00000060 [00000000]         
    85                                  
    86                                      ; Here we are testing the first input for invalid inputs
    87                                      ; Test if the speed is negative or == 0
    88 00000064 F20F100425-                 movsd xmm0, qword [init_speed]
    88 00000069 [00000000]         
    89 0000006D 660F2E0425-                 ucomisd xmm0, qword [zero]
    89 00000072 [5A010000]         
    90 00000076 7688                        jbe quit_program
    91                                  
    92                                      ;--------------------------------------------------------------------------
    93                                      ; This whole section is for dealing with the second output and input process, including testing it
    94                                  
    95                                      ; Write the second question to output
    96 00000078 4883EC08                    sub rsp, 8
    97 0000007C 48BF-                       mov rdi, q2
    97 0000007E [4B00000000000000] 
    98 00000086 E8(00000000)                call printf
    99 0000008B 4883C408                    add rsp, 8
   100                                      ; Read input from the second question and store it in xmm9
   101 0000008F 6A00                        push qword 0
   102 00000091 B800000000                  mov qword rax, 0
   103 00000096 48BF-                       mov rdi, decimal_format
   103 00000098 [CD00000000000000] 
   104 000000A0 4889E6                      mov rsi, rsp
   105 000000A3 E8(00000000)                call scanf
   106 000000A8 F2440F100C24                movsd xmm9, [rsp]
   107 000000AE 58                          pop rax
   108 000000AF F2440F110C25-               movsd qword [init_dist], xmm9
   108 000000B5 [08000000]         
   109                                  
   110                                      ; Here we are testing the second input for invalid inputs
   111                                      ; Test if the distance is negative or == 0
   112 000000B9 F20F100425-                 movsd xmm0, qword [init_dist]
   112 000000BE [08000000]         
   113 000000C2 660F2E0425-                 ucomisd xmm0, qword [zero]
   113 000000C7 [5A010000]         
   114 000000CB 0F862FFFFFFF                jbe quit_program
   115                                      ; Test if the distance is greater than or == 253.5
   116 000000D1 F20F100425-                 movsd xmm0, qword [init_dist]
   116 000000D6 [08000000]         
   117 000000DA 660F2E0425-                 ucomisd xmm0, qword [dist]
   117 000000DF [00000000]         
   118 000000E3 0F8317FFFFFF                jae quit_program
   119                                  
   120                                      ;--------------------------------------------------------------------------
   121                                      ; This whole section is for dealing with the third output and input process, including testing it
   122                                  
   123                                      ; Write the third question to output
   124 000000E9 4883EC08                    sub rsp, 8
   125 000000ED 48BF-                       mov rdi, q1
   125 000000EF [0800000000000000] 
   126 000000F7 E8(00000000)                call printf
   127 000000FC 4883C408                    add rsp, 8
   128                                      ; Read input from the third question and store it in xmm10
   129 00000100 6A00                        push qword 0
   130 00000102 B800000000                  mov qword rax, 0
   131 00000107 48BF-                       mov rdi, decimal_format
   131 00000109 [CD00000000000000] 
   132 00000111 4889E6                      mov rsi, rsp
   133 00000114 E8(00000000)                call scanf
   134 00000119 F2440F101424                movsd xmm10, [rsp]
   135 0000011F 58                          pop rax
   136 00000120 F2440F111425-               movsd qword [second_speed], xmm10
   136 00000126 [18000000]         
   137                                  
   138                                      ; Here we are testing the third input for invalid inputs
   139                                      ; Test if the speed is negative or == 0
   140 0000012A F20F100425-                 movsd xmm0, qword [second_speed]
   140 0000012F [18000000]         
   141 00000133 660F2E0425-                 ucomisd xmm0, qword [zero]
   141 00000138 [5A010000]         
   142 0000013C 0F86BEFEFFFF                jbe quit_program
   143                                  
   144                                      ;--------------------------------------------------------------------------
   145                                      ; This whole section handles mathematical operations, who results will be used in the final output
   146                                      ; to the user at the end of the program
   147                                  
   148                                      ; Calculate the total distance of the second trip (miles)
   149 00000142 F2440F101C25-               movsd xmm11, qword [dist]
   149 00000148 [00000000]         
   150 0000014C F2440F5C1C25-               subsd xmm11, qword [init_dist]
   150 00000152 [08000000]         
   151 00000156 F2440F111C25-               movsd qword [second_dist], xmm11
   151 0000015C [20000000]         
   152                                  
   153                                      ; Calculate the time trip 1 takes (hours)
   154 00000160 F2440F102425-               movsd xmm12, qword [init_dist]
   154 00000166 [08000000]         
   155 0000016A F2440F5E2425-               divsd xmm12, qword [init_speed]
   155 00000170 [00000000]         
   156 00000174 F2440F112425-               movsd qword [init_time], xmm12
   156 0000017A [10000000]         
   157                                  
   158                                      ; Calculate the time trip 2 takes (hours)
   159 0000017E F2440F102C25-               movsd xmm13, qword [second_dist]
   159 00000184 [20000000]         
   160 00000188 F2440F5E2C25-               divsd xmm13, qword [second_speed]
   160 0000018E [18000000]         
   161 00000192 F2440F112C25-               movsd qword [second_time], xmm13
   161 00000198 [28000000]         
   162                                  
   163                                      ; Calculate the time for both trips (hours) 
   164 0000019C F2440F103425-               movsd xmm14, qword [init_time]
   164 000001A2 [10000000]         
   165 000001A6 F2440F583425-               addsd xmm14, qword [second_time]
   165 000001AC [28000000]         
   166 000001B0 F2440F113425-               movsd qword [total_time], xmm14
   166 000001B6 [30000000]         
   167                                  
   168                                      ; Calculate the average speed (mph)
   169 000001BA F2440F103C25-               movsd xmm15, qword [dist]
   169 000001C0 [00000000]         
   170 000001C4 F2440F5E3C25-               divsd xmm15, qword [total_time]
   170 000001CA [30000000]         
   171 000001CE F2440F113C25-               movsd qword [avg_speed], xmm15
   171 000001D4 [38000000]         
   172                                  
   173                                      ;--------------------------------------------------------------------------
   174                                      ; This program prints the final results to the user, then exits with the 
   175                                      ; total_time as the return value
   176                                  
   177                                      ; Print the average speed
   178 000001D8 6A00                        push qword 0
   179 000001DA B801000000                  mov rax, 1
   180 000001DF 48BF-                       mov rdi, out1
   180 000001E1 [D500000000000000] 
   181 000001E9 F20F100425-                 movsd xmm0, qword [avg_speed]
   181 000001EE [38000000]         
   182 000001F2 E8(00000000)                call printf
   183 000001F7 B800000000                  mov qword rax, 0
   184 000001FC 58                          pop rax
   185                                  
   186                                      ; Print the total travel time (hours)
   187 000001FD 6A00                        push qword 0
   188 000001FF B801000000                  mov rax, 1
   189 00000204 48BF-                       mov rdi, out2
   189 00000206 [F900000000000000] 
   190 0000020E F20F100425-                 movsd xmm0, qword [total_time]
   190 00000213 [30000000]         
   191 00000217 E8(00000000)                call printf
   192 0000021C B800000000                  mov qword rax, 0
   193 00000221 58                          pop rax
   194                                      
   195                                      ; End the program
   196 00000222 B8[30000000]                mov eax, total_time
   197 00000227 F20F100425-                 movsd xmm0, qword [total_time]
   197 0000022C [30000000]         
   198 00000230 C3                          ret
